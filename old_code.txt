#this code can be reused to add functionalities but for now its there so we can focus on the main feature

# zdania = [zamienRownowaznosc(zdanie) for zdanie in zdania]
# print('zamieniona rownowaznosc')
# print(zdania)
#
# zdania = [zamienImplikacje(zdanie) for zdanie in zdania]
# print('zamieniona implik')
# print(zdania)

# zdania = [redukcjaMinusow(zdanie) for zdanie in zdania]
# print('zredukowane minusy')
# print(zdania)


# def rozbijAlternatywe2(zdanie):
#     pass
#
#
# def rozbijAlternatywe(zdanie):
#     zdanko = zdanie
#     if zdanko[0][1] in priorytety:          # [0] is left operand, [1] is sign [2] is right operand
#         zdanko = rozbijAlternatywe2(zdanko)
#         if zdanko[1] == '&':
#             return zdanko
#     if zdanko[2][1] in priorytety:
#         zdanko = rozbijAlternatywe2(zdanko)
#         return zdanko
#     return [zdanko[0], '|', zdanko[1]]


# def koniunkcjaAlternatyw(zdanie):
#     zdanko = zdanie
#     znak = zdanko[1]
#     if znak in priorytety:
#         if znak == '|':
#             zdanko = rozbijAlternatywe(zdanko)
#         elif znak == '&':
#             zdanko[0] = koniunkcjaAlternatyw(zdanko[0])
#             zdanko[0] = koniunkcjaAlternatyw(zdanko[0])
#         else:
#             raise ValueError('Tu nie moze byc innego znaku, a jak jest to blad parsowania')
#     return zdanko


# zdania = [koniunkcjaAlternatyw(zdanie) for zdanie in zdania]
# print('na koniuncje alternatyw')
# print(zdania)


# def zamienRownowaznosc(zdanie):
#     zdanko = zdanie
#     if zdanko[0] == '-':
#         zdanko[1] = zamienRownowaznosc(zdanko[1])  # TODEBUG: lista lub nie lista to debug.
#     elif zdanko[1] in priorytety:
#         zdanko[0] = zamienRownowaznosc(zdanko[0])
#         zdanko[2] = zamienRownowaznosc(zdanko[2])
#         if zdanko[1] == '=':
#             lewa_implikacja = [zdanko[0], '>', zdanko[2]]
#             prawa_implikacja = [zdanko[2], '>', zdanko[0]]
#             zdanko = [lewa_implikacja, '&', prawa_implikacja]
#
#     return zdanko
# def nagacja(param):
#     if param[0] == '-':
#         return param[1]
#     else:
#         return ['-', param]
#
#
# def zamienImplikacje(zdanie):
#     zdanko = zdanie
#     if zdanko[0] == '-':
#         zdanko[1] = zamienImplikacje(zdanko[1])  # TODEBUG: lista lub nie lista to debug.
#     elif zdanko[1] in priorytety:
#         zdanko[0] = zamienImplikacje(zdanko[0])
#         zdanko[2] = zamienImplikacje(zdanko[2])
#         if zdanko[1] == '>':
#             zdanko = [nagacja(zdanko[0]), '|', zdanko[2]]
#
#     return zdanko
# def redukcjaMinusow(zdanie):
#     zdanko = zdanie
#     if zdanko[0] == '-':
#         if isinstance(zdanko[1], str):  # literal, jesli po minusie nie ma listy tylko odrazu strink
#             return zdanko
#         elif zdanko[1][0] == '-':  # podwojne przeczenie, tu redukcja
#             zdanko[1][1] = redukcjaMinusow(zdanko[1][1])
#         else:  # elif zdanko [1] in priori:
#             zdanko[1][0] = redukcjaMinusow(nagacja(zdanko[1][0]))   #negujemu bo przed nawiasem minus (weszlismy do pierwszego ifa)
#             zdanko[1][2] = redukcjaMinusow(nagacja(zdanko[1][2]))
#             if zdanko[1][1] == '&':
#                 zdanko[1][1] = '|'
#             elif zdanko[1][1] == '|':
#                 zdanko[1][1] = '&'
#             return zdanko[1]
#     elif zdanko[1] in priorytety:
#         zdanko[0] = redukcjaMinusow(zdanko[0])
#         zdanko[2] = redukcjaMinusow(zdanko[2])
#     return zdanko
# def alternNaKlauz(zdanie):
#     zdanko = zdanie
#     znak = zdanko[1]
#     if znak in priorytety:
#         # TODO: usunac
#         if znak != '|':
#             raise RuntimeError("TU POWINNA BYC ALTERNATYWA NIE MA INNEJ OPCJI")
#         klauzula = [alternNaKlauz(zdanko[0]), alternNaKlauz(zdanko[2])]
#         return klauzula
#     else:
#
#
#
# def stworzKlauzule(zdanie):
#     zdanko = zdanie
#     znak = zdanko[1]
#     if znak == '&':
#         klauzule = [stworzKlauzule(zdanko[0]), stworzKlauzule(zdanko[2])]
#         return klauzule
#
#     klauzule = [alternNaKlauz(zdanko)]
#     return klauzule








# instnieje_rezolucja = True
#
# while instnieje_rezolucja:
#     istnieje_rezolucja = False

# def sprawdz_rezolucje:
#     pass
# tezy = lista_klauzul[-1]
# roboczy = []


# def rezolucja_roboczego(lista_klauzul, roboczy_akt, roboczy):
#     if roboczy_akt is None:
#         return False
#     else:
#         for klauzula in lista_klauzul:
#             roboczy += rezolucja(klauzula, roboczy_akt)
#             roboczy_akt = roboczy[-1]
#             lista_klauzul += roboczy_akt
#             if rezolucja_roboczego(lista_klauzul, roboczy_akt, roboczy):
#                 break


# output = da_sie_rezolucje(lista_klauzul[0].Literaly[0], lista_klauzul[1].Literaly[0])
# print(output)
# quit()
# lista_rezolucji = []

# def zaszlaRezolucja(gornaKlauzula, dolnaKlauzula):
#     pass


# def rezolucja(klauzula, teza):
#     gornaKlauzula = teza
#     dolnaKlauzula = klauzula
#     nowa_gorna_klauzula = copy.deepcopy(gornaKlauzula)
#     nowa_dolna_klauzula = copy.deepcopy(dolnaKlauzula)
#     lista_unifikacji = []
#     unifikacja_gorna = []
#     unifikacja_dolna = []
#     for literal_gorny in gornaKlauzula.Literaly:
#         for literal_dolny in dolnaKlauzula.Literaly:
#             if literal_gorny.rezolucjowalny(literal_dolny):
#                 for index, arg_gorny in enumerate(literal_gorny.Predykat.Argumenty):
#                     arg_dolny = literal_dolny.Predykat.Argumenty[index]
#                     if arg_gorny.Nazwa != arg_dolny.Nazwa:
#                         lista_unifikacji.extend([arg_gorny, arg_dolny])
#                 for i in range(0, len(lista_unifikacji), 2):
#                     pierwszy = lista_unifikacji[i]
#                     drugi = lista_unifikacji[i + 1]
#                     if not pierwszy.stala() and drugi.stala():
#                         # for lit in nowa_gorna_klauzula.Literaly:
#                         #     for arg in lit.Predykat.Argumenty:
#                         #         if arg.Nazwa == pierwszy.Nazwa:
#                         unifikacja_gorna.extend([pierwszy.Nazwa, drugi.Nazwa])
#
#                     if not pierwszy.stala() and not drugi.stala() and pierwszy.Nazwa != drugi.Nazwa:
#                         # for lit in nowa_gorna_klauzula.Literaly:
#                         #     for arg in lit.Predykat.Argumenty:
#                         #         if arg.Nazwa == pierwszy.Nazwa:
#                         unifikacja_gorna.extend([pierwszy.Nazwa, drugi.Nazwa])
#
#                     if pierwszy.stala() and not drugi.stala():
#                         unifikacja_dolna.extend([drugi.Nazwa, pierwszy.Nazwa])
#
#                 for lit in nowa_gorna_klauzula.Literaly:
#                     for arg in lit.Predykat.Argumenty:
#                         for i in range(0, len(unifikacja_gorna), 2):
#                             if arg.Nazwa == unifikacja_gorna[i]:
#                                 arg.Nazwa = unifikacja_gorna[i + 1]
#                                 break
#                 print(nowa_dolna_klauzula)
#                 for lit in nowa_dolna_klauzula.Literaly:
#                     for arg in lit.Predykat.Argumenty:
#                         for i in range(0, len(unifikacja_dolna), 2):
#                             if arg.Nazwa == unifikacja_dolna[i]:
#                                 arg.Nazwa = unifikacja_dolna[i + 1]
#                                 print(nowa_dolna_klauzula)
#                                 break


tezy = [lista_klauzul[-1]]


# def wnioskuj(lista_klauzul, roboczy):
#     for klauzula in lista_klauzul:
#         for teza in tezy:
#             try:
#                 roboczy += rezolucja(klauzula, teza)
#             except TypeError:
#                 continue
#             lista_klauzul += roboczy
#             roboczy_akt = roboczy[-1]
#             if rezolucja_roboczego(lista_klauzul, roboczy_akt, roboczy):
#                 break


def sprawdz_rezolucjowalnosc(gorna_klauzula, dolna_klauzula):
    rezolucja_zaszla = False
    for literal_z_gornej in gorna_klauzula.Literaly:
        for literal_z_dolnej in dolna_klauzula.Literaly:
            if literal_z_gornej.rezolucjowalny(literal_z_dolnej):
                rezolucja_zaszla = True
    return rezolucja_zaszla


def ma_rodzicow(gorna_klauzula, dolna_klauzula):
    return True


def zaszla_rezolucja(gorna_klauzula, dolna_klauzula):
    for laczenie_klauzul in laczenia_klauzul:
        if ma_rodzicow(gorna_klauzula, dolna_klauzula):
            return False # TODO: KEK


def wnioskuj(lista_klauzul):
    klauzule = copy.deepcopy(lista_klauzul)
    dodane_klauzule = []
    istnieje_rezolucjowalnosc = True
    while istnieje_rezolucjowalnosc:
        istnieje_rezolucjowalnosc = False
        for index, gorna_klauzula in enumerate(lista_klauzul):
            for dolna_klauzula in lista_klauzul[index+1:]:
                rezolucjowalna = sprawdz_rezolucjowalnosc(gorna_klauzula, dolna_klauzula)
                if rezolucjowalna and not zaszla_rezolucja(gorna_klauzula, dolna_klauzula):
                    istnieje_rezolucjowalnosc = True
                    #nowa_klauzula =

    print(dodane_klauzule)
    print(lista_klauzul)
    quit()

laczenia_klauzul = []

if(wnioskuj(lista_klauzul)):
    print("Udalo sie")


def rezolucja(klauzula, teza):
    gornaKlauzula = teza
    dolnaKlauzula = klauzula
    nowa_gorna_klauzula = copy.deepcopy(gornaKlauzula)
    nowa_dolna_klauzula = copy.deepcopy(dolnaKlauzula)
    lista_unifikacji = []
    unifikacja_gorna = []
    unifikacja_dolna = []
    for literal_gorny in gornaKlauzula.Literaly:
        for literal_dolny in dolnaKlauzula.Literaly:
            if literal_gorny.rezolucjowalny(literal_dolny):
                for index, arg_gorny in enumerate(literal_gorny.Predykat.Argumenty):
                    arg_dolny = literal_dolny.Predykat.Argumenty[index]
                    if arg_gorny.Nazwa != arg_dolny.Nazwa:
                        lista_unifikacji.extend([arg_gorny, arg_dolny])
                for i in range(0, len(lista_unifikacji), 2):
                    pierwszy = lista_unifikacji[i]
                    drugi = lista_unifikacji[i + 1]
                    if not pierwszy.stala() and drugi.stala():
                        # for lit in nowa_gorna_klauzula.Literaly:
                        #     for arg in lit.Predykat.Argumenty:
                        #         if arg.Nazwa == pierwszy.Nazwa:
                        unifikacja_gorna.extend([pierwszy.Nazwa, drugi.Nazwa])

                    if not pierwszy.stala() and not drugi.stala() and pierwszy.Nazwa != drugi.Nazwa:
                        # for lit in nowa_gorna_klauzula.Literaly:
                        #     for arg in lit.Predykat.Argumenty:
                        #         if arg.Nazwa == pierwszy.Nazwa:
                        unifikacja_gorna.extend([pierwszy.Nazwa, drugi.Nazwa])

                    if pierwszy.stala() and not drugi.stala():
                        unifikacja_dolna.extend([drugi.Nazwa, pierwszy.Nazwa])

                for lit in nowa_gorna_klauzula.Literaly:
                    for arg in lit.Predykat.Argumenty:
                        for i in range(0, len(unifikacja_gorna), 2):
                            if arg.Nazwa == unifikacja_gorna[i]:
                                arg.Nazwa = unifikacja_gorna[i + 1]
                                break

                for lit in nowa_dolna_klauzula.Literaly:
                    for arg in lit.Predykat.Argumenty:
                        for i in range(0, len(unifikacja_dolna), 2):
                            if arg.Nazwa == unifikacja_dolna[i]:
                                arg.Nazwa = unifikacja_dolna[i + 1]
                                break
                nowa_gorna_klauzula.usun_prawde(dolnaKlauzula)